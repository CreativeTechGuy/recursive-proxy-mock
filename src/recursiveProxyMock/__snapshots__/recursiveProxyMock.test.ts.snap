// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`recursiveProxyMock proxy trap: apply 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "args": [],
    "name": "apply",
    "parent": 2,
    "pathKey": [
      Symbol(apply),
    ],
    "self": 3,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 4,
  },
  {
    "args": [],
    "name": "apply",
    "parent": 4,
    "pathKey": [
      Symbol(apply),
    ],
    "self": 5,
  },
  {
    "name": "get",
    "parent": 5,
    "pathKey": [
      "d",
    ],
    "prop": "d",
    "self": 6,
  },
  {
    "args": [],
    "name": "apply",
    "parent": 6,
    "pathKey": [
      Symbol(apply),
    ],
    "self": 7,
  },
]
`;

exports[`recursiveProxyMock proxy trap: construct 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "args": [
      2,
    ],
    "name": "construct",
    "parent": 2,
    "pathKey": [
      Symbol(construct),
    ],
    "self": 3,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 4,
  },
  {
    "args": [],
    "name": "construct",
    "parent": 4,
    "pathKey": [
      Symbol(construct),
    ],
    "self": 5,
  },
  {
    "name": "get",
    "parent": 5,
    "pathKey": [
      "d",
    ],
    "prop": "d",
    "self": 6,
  },
  {
    "args": [],
    "name": "construct",
    "parent": 6,
    "pathKey": [
      Symbol(construct),
    ],
    "self": 7,
  },
]
`;

exports[`recursiveProxyMock proxy trap: defineProperty 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "descriptor": {
      "value": 7,
    },
    "name": "defineProperty",
    "parent": 1,
    "pathKey": [
      "b",
      Symbol(defineProperty),
    ],
    "prop": "b",
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 2,
  },
  {
    "descriptor": {
      "value": "potato",
    },
    "name": "defineProperty",
    "parent": 2,
    "pathKey": [
      "c",
      Symbol(defineProperty),
    ],
    "prop": "c",
  },
]
`;

exports[`recursiveProxyMock proxy trap: deleteProperty 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "deleteProperty",
    "parent": 1,
    "pathKey": [
      "b",
      Symbol(deleteProperty),
    ],
    "prop": "b",
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 2,
  },
  {
    "name": "deleteProperty",
    "parent": 2,
    "pathKey": [
      "d",
      Symbol(deleteProperty),
    ],
    "prop": "d",
  },
]
`;

exports[`recursiveProxyMock proxy trap: get 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "num",
    ],
    "prop": "num",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "val",
    ],
    "prop": "val",
    "self": 2,
  },
  {
    "name": "get",
    "parent": 2,
    "pathKey": [
      Symbol(Symbol.toPrimitive),
    ],
    "prop": Symbol(Symbol.toPrimitive),
    "self": 3,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 4,
  },
  {
    "name": "get",
    "parent": 4,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 5,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 6,
  },
  {
    "name": "get",
    "parent": 6,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 7,
  },
  {
    "name": "getPrototypeOf",
    "parent": 7,
    "pathKey": [
      Symbol(getPrototypeOf),
    ],
    "self": 8,
  },
]
`;

exports[`recursiveProxyMock proxy trap: getOwnPropertyDescriptor 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 1,
    "pathKey": [
      "b",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 3,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 3,
    "pathKey": [
      "c",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "c",
    "self": 4,
  },
  {
    "name": "get",
    "parent": 4,
    "pathKey": [
      "d",
    ],
    "prop": "d",
    "self": 5,
  },
  {
    "name": "get",
    "parent": 5,
    "pathKey": [
      "e",
    ],
    "prop": "e",
    "self": 6,
  },
]
`;

exports[`recursiveProxyMock proxy trap: getPrototypeOf 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 2,
  },
  {
    "name": "getPrototypeOf",
    "parent": 2,
    "pathKey": [
      Symbol(getPrototypeOf),
    ],
    "self": 3,
  },
]
`;

exports[`recursiveProxyMock proxy trap: has 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "has",
    "parent": 1,
    "pathKey": [
      "b",
      Symbol(has),
    ],
    "prop": "b",
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 2,
  },
  {
    "name": "has",
    "parent": 2,
    "pathKey": [
      "c",
      Symbol(has),
    ],
    "prop": "c",
  },
]
`;

exports[`recursiveProxyMock proxy trap: isExtensible 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "name": "isExtensible",
    "parent": 2,
    "pathKey": [
      Symbol(isExtensible),
    ],
  },
]
`;

exports[`recursiveProxyMock proxy trap: ownKeys 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "name": "ownKeys",
    "parent": 2,
    "pathKey": [
      Symbol(ownKeys),
    ],
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 2,
    "pathKey": [
      "po",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "po",
    "self": 3,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 2,
    "pathKey": [
      "ta",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "ta",
    "self": 4,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 2,
    "pathKey": [
      "to",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "to",
    "self": 5,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 2,
    "pathKey": [
      "arguments",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "arguments",
    "self": 6,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 2,
    "pathKey": [
      "caller",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "caller",
    "self": 7,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 2,
    "pathKey": [
      "prototype",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "prototype",
    "self": 8,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 9,
  },
  {
    "name": "get",
    "parent": 9,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 10,
  },
  {
    "name": "ownKeys",
    "parent": 10,
    "pathKey": [
      Symbol(ownKeys),
    ],
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 10,
    "pathKey": [
      "arguments",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "arguments",
    "self": 11,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 10,
    "pathKey": [
      "caller",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "caller",
    "self": 12,
  },
  {
    "name": "getOwnPropertyDescriptor",
    "parent": 10,
    "pathKey": [
      "prototype",
      Symbol(getOwnPropertyDescriptor),
    ],
    "prop": "prototype",
    "self": 13,
  },
]
`;

exports[`recursiveProxyMock proxy trap: preventExtensions 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "name": "preventExtensions",
    "parent": 2,
    "pathKey": [
      Symbol(preventExtensions),
    ],
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 3,
  },
  {
    "name": "get",
    "parent": 3,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 4,
  },
  {
    "name": "preventExtensions",
    "parent": 4,
    "pathKey": [
      Symbol(preventExtensions),
    ],
  },
]
`;

exports[`recursiveProxyMock proxy trap: set 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "set",
    "parent": 1,
    "pathKey": [
      "b",
      Symbol(set),
    ],
    "prop": "b",
    "value": 7,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "name": "set",
    "parent": 2,
    "pathKey": [
      "c",
      Symbol(set),
    ],
    "prop": "c",
    "value": "potato",
  },
]
`;

exports[`recursiveProxyMock proxy trap: setPrototypeOf 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 2,
  },
  {
    "name": "setPrototypeOf",
    "parent": 2,
    "pathKey": [
      Symbol(setPrototypeOf),
    ],
    "prototype": {
      "protoValue": 7,
    },
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 3,
  },
  {
    "name": "get",
    "parent": 3,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 4,
  },
  {
    "name": "setPrototypeOf",
    "parent": 4,
    "pathKey": [
      Symbol(setPrototypeOf),
    ],
    "prototype": {
      "protoValue": "potato",
    },
  },
]
`;

exports[`recursiveProxyMock supports math operations on primitive 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "test",
    ],
    "prop": "test",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      Symbol(Symbol.toPrimitive),
    ],
    "prop": Symbol(Symbol.toPrimitive),
    "self": 2,
  },
  {
    "name": "set",
    "parent": 0,
    "pathKey": [
      "test",
      Symbol(set),
    ],
    "prop": "test",
    "value": 0,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 3,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "c",
    ],
    "prop": "c",
    "self": 4,
  },
  {
    "name": "get",
    "parent": 4,
    "pathKey": [
      "d",
    ],
    "prop": "d",
    "self": 5,
  },
  {
    "name": "get",
    "parent": 5,
    "pathKey": [
      "e",
    ],
    "prop": "e",
    "self": 6,
  },
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "a",
    ],
    "prop": "a",
    "self": 7,
  },
  {
    "name": "get",
    "parent": 7,
    "pathKey": [
      "b",
    ],
    "prop": "b",
    "self": 8,
  },
  {
    "name": "get",
    "parent": 8,
    "pathKey": [
      Symbol(Symbol.toPrimitive),
    ],
    "prop": Symbol(Symbol.toPrimitive),
    "self": 9,
  },
  {
    "name": "get",
    "parent": 6,
    "pathKey": [
      Symbol(Symbol.toPrimitive),
    ],
    "prop": Symbol(Symbol.toPrimitive),
    "self": 10,
  },
  {
    "name": "set",
    "parent": 3,
    "pathKey": [
      "b",
      Symbol(set),
    ],
    "prop": "b",
    "value": "0",
  },
]
`;

exports[`recursiveProxyMock supports spread as an array 1`] = `
[
  {
    "name": "get",
    "parent": 0,
    "pathKey": [
      "should",
    ],
    "prop": "should",
    "self": 1,
  },
  {
    "name": "get",
    "parent": 1,
    "pathKey": [
      "spread",
    ],
    "prop": "spread",
    "self": 2,
  },
  {
    "name": "get",
    "parent": 2,
    "pathKey": [
      Symbol(Symbol.iterator),
    ],
    "prop": Symbol(Symbol.iterator),
    "self": 3,
  },
  {
    "args": [],
    "name": "apply",
    "parent": 3,
    "pathKey": [
      Symbol(apply),
    ],
    "self": 4,
  },
  {
    "name": "get",
    "parent": 4,
    "pathKey": [
      "next",
    ],
    "prop": "next",
    "self": 5,
  },
  {
    "args": [],
    "name": "apply",
    "parent": 5,
    "pathKey": [
      Symbol(apply),
    ],
    "self": 6,
  },
  {
    "name": "get",
    "parent": 6,
    "pathKey": [
      "done",
    ],
    "prop": "done",
    "self": 7,
  },
  {
    "name": "set",
    "parent": 0,
    "pathKey": [
      "spread",
      Symbol(set),
    ],
    "prop": "spread",
    "value": [],
  },
]
`;
